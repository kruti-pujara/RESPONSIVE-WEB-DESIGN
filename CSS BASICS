                                                                    *changing the color of text*
style can be of three types and its a best practice to end the inline style with a ; (semi colon).
creating the style tag in head button for better views
creating class for decorating the elements..

Style Multiple Elements with a CSS Class
Classes allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your red-text class to the first p elemen

Change the Font Size of an Element
Font size is controlled by the font-size CSS property, like this:
h1 {
  font-size: 30px;
}

Import a Google FontPassed
To import a Google Font, you can copy the font's URL from the Google Fonts library and then paste it in your HTML. For this challenge,
we'll import the Lobster font. To do this, copy the following code snippet and paste it into the top of your code editor (before the opening style element):
<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">
font-family: FAMILY_NAME, GENERIC_NAME;    The GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available.
Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the "Open Sans" font,
but not to use the Lobster font.

Size Your Images
CSS has a property called width that controls an element's width. Just like with fonts, we'll use px (pixels) to specify the image's width.

border-radius (giving the perent value will shape it round)
border
style
color
width
font-family
font-size
backgrounf-color 

we can also create the multiple classes for the same html element class="class1 lass2"

One cool thing about id attributes is that, like classes, you can style them using CSS.

However, an id is not reusable and should only be applied to one element. An id also has a higher specificity (importance) than a class so if both are applied to the same
element and have conflicting styles, the styles of the id will be applied.

Here's an example of how you can take your element with the id attribute of cat-photo-element and give it the background color of green. In your style element:
#cat-photo-element {
  background-color: green;
}
Note that inside your style element, you always reference classes by putting a . in front of their names. You always reference ids by putting a # in front of their names.
 
Three important properties control the space that surrounds each HTML element: padding, border, and margin.
An element's padding controls the amount of space between the element's content and its border.
Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more padding than the blue box.
When you increase the blue box's padding, it will increase the distance (padding) between the text and the border around it
An element's margin controls the amount of space between an element's border and surrounding elements.
If you set an element's margin to a negative value, the element will grow larger.

cloackwise assignment top roight bottom left

the overriding concepts n css:
1. class2 override the class 1 f its declared next to class one otherwise class1 will override
2. id overrides the class no mateer where they are placed
3. inline styles override evry class and ids mentioned.
4.In many situations, you will use CSS libraries. These may accidentally override your own CSS. 
So when you absolutely need to be sure that an element has specific CSS, you can use !important.
Let's go all the way back to our pink-text class declaration. Remember that our pink-text class was overridden by subsequent class declarations,
id declarations, and inline styles.
Let's add the keyword !important to your pink-text element's color declaration to make 100% sure that your h1 element will be pink.
An example of how to do this is:
color: red !important;

colors in css
For example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being #FFA500.

The digit 0 is the lowest number in hex code, and represents a complete absence of color.

The digit F is the highest number in hex code, and represents the maximum possible brightness.

For example, red's hex code #FF0000 can be shortened to #F00. This shortened form gives one digit for red, one digit for green, and one digit for blue.

This reduces the total number of possible colors to around 4,000. But browsers will interpret #FF0000 and #F00 as exactly the same color.

The RGB value for black looks like this:

rgb(0, 0, 0)
The RGB value for white looks like this:

rgb(255, 255, 255)


*Create a custom CSS Variable*
To create a CSS variable, you just need to give it a name with two hyphens in front of it and assign it a value like this:
// declaring a variable name
--penguin-skin: gray;


// to assign it to different style properties we 
After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.
background: var(--penguin-skin);
This will change the background of whatever element you are targeting to gray because that is the value of the --penguin-skin variable. 
Note that styles will not be applied unless the variable names are an exact match.

//Attach a Fallback value to a CSS Variable

When using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid.

Note: This fallback is not used to increase browser compatibility, and it will not work on IE browsers. Rather, 
it is used so that the browser has a color to display if it cannot find your variable.

Here's how you do it:

background: var(--penguin-skin, black);
This will set background to black if your variable wasn't set. Note that this can be useful for debugging.


*Inherit CSS Variables*
When you create a variable, it is available for you to use inside the selector in which you create it. It also is available in any of that selector's descendants.
This happens because CSS variables are inherited, just like ordinary properties.

To make use of inheritance, CSS variables are often defined in the :root element.

:root is a pseudo-class selector that matches the root element of the document, usually the html element.
By creating your variables in :root, they will be available globally and can be accessed from any other selector in the style sheet.


When you create your variables in :root they will set the value of that variable for the whole page.
You can then over-write these variables by setting them again within a specific element.



















